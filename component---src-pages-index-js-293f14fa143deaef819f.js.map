{"version":3,"sources":["webpack:///./src/components/spamFilterList.js","webpack:///./src/pages/index.js","webpack:///./src/components/providerList.js","webpack:///./src/components/codeList.js"],"names":["spamFilters","helpers","allSpamFiltersJson","orderBy","o","name","toLowerCase","className","map","provider","key","id","to","IndexPage","hideSearch","description","indices","algoliaIndices","href","rel","target","updateOnScroll","providers","allEmailProvidersJson","codes","allCodesJson","reply","filterByCategory","code","renderCode","category","filter","startsWith"],"mappings":"oMAMe,aACb,IAAIA,EAAW,OAgBf,OAHAA,EAAcC,UAAgBD,EAAYE,oBAC1CF,EAAcG,kBAAQH,EAAa,CAAC,SAAAI,GAAC,OAAIA,EAAEC,KAAKC,iBAG9C,6BAASC,UAAU,gBACjB,yBAAKA,UAAU,sBACb,6CAEF,yBAAKA,UAAU,wBACb,sFAEA,wBAAIA,UAAU,6BACXP,EAAYQ,KAAI,SAAAC,GAAQ,OACvB,wBAAIC,IAAKD,EAASE,IAChB,kBAAC,IAAD,CAAMC,GAAE,eAAiBH,EAASE,IAAOF,EAASJ,c,2BCqDjDQ,UA3EG,WAChB,OACE,kBAAC,IAAD,CAAQC,YAAY,GAClB,kBAAC,IAAD,CAAKC,YAAY,2GAEjB,yBAAKR,UAAU,QACb,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,cAAd,0DAGA,uBAAGA,UAAU,oBAAb,+CAGA,yBAAKA,UAAU,eACb,kBAAC,IAAD,CAAQS,QAASC,OAEnB,uBAAGV,UAAU,iBAAb,qBACoB,0BAAMA,UAAU,uBAClC,uBACEW,KAAK,0BACLC,IAAI,sBACJC,OAAO,SACPb,UAAU,sBAJZ,YAFF,IAUI,IACF,kBAAC,IAAD,CAAMK,GAAG,OAAOL,UAAU,sBAA1B,0BAMN,kBAAC,IAAD,CAAec,gBAAgB,IAE/B,yBAAKd,UAAU,mBACb,yBAAKI,GAAG,QAAQJ,UAAU,cACxB,kBAAC,IAAD,OAGF,yBAAKA,UAAU,YAEf,yBAAKI,GAAG,aACN,kBAAC,IAAD,OAGF,yBAAKJ,UAAU,YAEf,yBAAKI,GAAG,eACN,kBAAC,EAAD,OAGF,yBAAKJ,UAAU,YAEf,6BAASA,UAAU,2BACjB,yBAAKA,UAAU,sBACb,kDAEF,yBAAKA,UAAU,wBACb,oTAKqB,kBAAC,IAAD,CAAMK,GAAG,eAAT,eALrB,KAOA,2BACE,kBAAC,IAAD,CAAMA,GAAG,QAAT,8B,8FCzEC,eACb,IAAIU,EAAS,OAgBb,OAHAA,EAAYrB,UAAgBqB,EAAUC,uBACtCD,EAAYnB,kBAAQmB,EAAW,CAAC,SAAAlB,GAAC,OAAIA,EAAEC,KAAKC,iBAG1C,6BAASC,UAAU,gBACjB,yBAAKA,UAAU,sBACb,gDAEF,yBAAKA,UAAU,wBACb,yFAEA,wBAAIA,UAAU,6BACXe,EAAUd,KAAI,SAAAC,GAAQ,OACrB,wBAAIC,IAAKD,EAASE,IAChB,kBAAC,IAAD,CAAMC,GAAE,aAAeH,EAASE,IAAOF,EAASJ,e,yrBC5B/C,eACb,IAAImB,EAAK,OAiBT,OAHAA,EAAQvB,UAAgBuB,EAAMC,cAC9BD,EAAQrB,kBAAQqB,EAAO,CAAC,SAAApB,GAAC,OAAIA,EAAEsB,SAG7B,6BAASnB,UAAU,gBACjB,yBAAKA,UAAU,sBACb,2CAGF,yBAAKA,UAAU,wBACb,wBAAIA,UAAU,cAAd,sCACA,yOAMA,wBAAIA,UAAU,6BACXoB,EAAiBH,EAAO,GAAGhB,KAAI,SAAAoB,GAAI,OAAIC,EAAWD,OAGrD,wBAAIrB,UAAU,yBAAd,yBACA,+LAMA,wBAAIA,UAAU,6BACXoB,EAAiBH,EAAO,GAAGhB,KAAI,SAAAoB,GAAI,OAAIC,EAAWD,UAO7D,IAAMD,EAAmB,SAACH,EAAOM,GAAR,OACvBC,iBAAOP,GAAO,SAAAI,GAAI,OAAII,qBAAWJ,EAAKF,MAAOI,OAEzCD,EAAa,SAAAD,GAAI,OACrB,wBAAIlB,IAAKkB,EAAKF,OACZ,kBAAC,IAAD,CAAMd,GAAE,SAAWgB,EAAKF,OAAUE,EAAKF,U","file":"component---src-pages-index-js-293f14fa143deaef819f.js","sourcesContent":["import React from 'react'\nimport { Link, useStaticQuery, graphql } from 'gatsby'\nimport { orderBy } from 'lodash'\n\nimport * as helpers from '../utils/helpers'\n\nexport default () => {\n  let spamFilters = useStaticQuery(graphql`\n    query getAllSpamFilters {\n      allSpamFiltersJson {\n        edges {\n          node {\n            name\n            id\n            slug\n          }\n        }\n      }\n    }\n  `)\n  spamFilters = helpers.flatten(spamFilters.allSpamFiltersJson)\n  spamFilters = orderBy(spamFilters, [o => o.name.toLowerCase()])\n\n  return (\n    <section className='list-section'>\n      <div className='list-section_title'>\n        <h3>Spam filters</h3>\n      </div>\n      <div className='list-section_content'>\n        <p>View SMTP responses for a specific spam filter service.</p>\n\n        <ul className='columns-3 columns-diamond'>\n          {spamFilters.map(provider => (\n            <li key={provider.id}>\n              <Link to={`/spamfilter/${provider.id}`}>{provider.name}</Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </section>\n  )\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Search from '../components/search'\nimport ProviderList from '../components/providerList'\nimport SpamFilterList from '../components/spamFilterList'\nimport CodeList from '../components/codeList'\nimport DividerGlitch from '../components/dividerGlitch'\nimport { algoliaIndices } from '../utils/algoliaIndices'\n\nconst IndexPage = () => {\n  return (\n    <Layout hideSearch={true}>\n      <SEO description='A collection of raw SMTP server responses from major email service providers and spam filter services.' />\n\n      <div className='hero'>\n        <div className='hero_container'>\n          <h2 className='hero_title'>\n            A collection of raw SMTP responses spotted in the wild\n          </h2>\n          <p className='hero_description'>\n            Find a specific SMTP code or email provider\n          </p>\n          <div className='hero_search'>\n            <Search indices={algoliaIndices} />\n          </div>\n          <p className='hero_postmark'>\n            Brought to you by <span className='hero_postmark-icon'></span>\n            <a\n              href='https://postmarkapp.com'\n              rel='noopener noreferrer'\n              target='_blank'\n              className='hero_postmark-link'\n            >\n              Postmark\n            </a>\n            .{' '}\n            <Link to='/why' className='hero_postmark-link'>\n              Why we built this &rarr;\n            </Link>\n          </p>\n        </div>\n      </div>\n      <DividerGlitch updateOnScroll={true} />\n\n      <div className='container-index'>\n        <div id='codes' className='u-push-top'>\n          <CodeList />\n        </div>\n\n        <div className='divider'></div>\n\n        <div id='providers'>\n          <ProviderList />\n        </div>\n\n        <div className='divider'></div>\n\n        <div id='spamfilters'>\n          <SpamFilterList />\n        </div>\n\n        <div className='divider'></div>\n\n        <section className='list-section u-push-top'>\n          <div className='list-section_title'>\n            <h3>SMTP Field Manual</h3>\n          </div>\n          <div className='list-section_content'>\n            <p>\n              The SMTP field manual is a collection of raw SMTP server responses\n              from major email service providers and spam filter services. The\n              data is open source so anyone make contributions. Even you! See\n              something interesting from an email service provider or simply\n              have a suggestion? <Link to='/contribute'>Let us know</Link>.\n            </p>\n            <p>\n              <Link to='/why'>Why we built this &rarr;</Link>\n            </p>\n          </div>\n        </section>\n      </div>\n    </Layout>\n  )\n}\nexport default IndexPage\n","import React from 'react'\nimport { Link, useStaticQuery, graphql } from 'gatsby'\nimport { orderBy } from 'lodash'\n\nimport * as helpers from '../utils/helpers'\n\nexport default () => {\n  let providers = useStaticQuery(graphql`\n    query getAllEmailProviders {\n      allEmailProvidersJson {\n        edges {\n          node {\n            name\n            id\n            slug\n          }\n        }\n      }\n    }\n  `)\n  providers = helpers.flatten(providers.allEmailProvidersJson)\n  providers = orderBy(providers, [o => o.name.toLowerCase()])\n\n  return (\n    <section className='list-section'>\n      <div className='list-section_title'>\n        <h3>Email providers</h3>\n      </div>\n      <div className='list-section_content'>\n        <p>View SMTP responses for a specific email service provider.</p>\n\n        <ul className='columns-3 columns-diamond'>\n          {providers.map(provider => (\n            <li key={provider.id}>\n              <Link to={`/provider/${provider.id}`}>{provider.name}</Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </section>\n  )\n}\n","import React from 'react'\nimport { Link, useStaticQuery, graphql } from 'gatsby'\nimport { orderBy, filter, startsWith } from 'lodash'\n\nimport * as helpers from '../utils/helpers'\n\nexport default () => {\n  let codes = useStaticQuery(graphql`\n    {\n      allCodesJson {\n        edges {\n          node {\n            id\n            description\n            reply\n            slug\n          }\n        }\n      }\n    }\n  `)\n  codes = helpers.flatten(codes.allCodesJson)\n  codes = orderBy(codes, [o => o.reply])\n\n  return (\n    <section className='list-section'>\n      <div className='list-section_title'>\n        <h3>SMTP codes</h3>\n      </div>\n\n      <div className='list-section_content'>\n        <h4 className='code-title'>4.X.X Persistent transient failure</h4>\n        <p>\n          The mail server encountered a temporary failure. If the command is\n          repeated without any change, it might be completed. Mail servers can\n          use temporary failures like this to keep untrusted senders at bay.\n        </p>\n\n        <ul className='columns-3 columns-diamond'>\n          {filterByCategory(codes, 4).map(code => renderCode(code))}\n        </ul>\n\n        <h4 className='code-title u-push-top'>5.X.X permanent error</h4>\n        <p>\n          The mail server has encounted a permanent error. These errors will\n          result in the SMTP connection being dropped. Re-sending will usually\n          produce the same result.\n        </p>\n\n        <ul className='columns-3 columns-diamond'>\n          {filterByCategory(codes, 5).map(code => renderCode(code))}\n        </ul>\n      </div>\n    </section>\n  )\n}\n\nconst filterByCategory = (codes, category) =>\n  filter(codes, code => startsWith(code.reply, category))\n\nconst renderCode = code => (\n  <li key={code.reply}>\n    <Link to={`/code/${code.reply}`}>{code.reply}</Link>\n  </li>\n)\n"],"sourceRoot":""}